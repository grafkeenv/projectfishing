import os
import streamlit as st
import requests
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE_URL = os.environ.get("API_BASE_URL", "http://localhost:8001")

def login(email: str, password: str):
    response = requests.post(
        f"{API_BASE_URL}/users/token",
        data={"username": email, "password": password}
    )
    response.raise_for_status()
    return response.json()

def register(email: str, password: str):
    response = requests.post(
        f"{API_BASE_URL}/users/",
        json={"email": email, "password": password}
    )
    return response.json()

def create_app(token: str, app_name: str, day_limit: int = 1000):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.post(
        f"{API_BASE_URL}/apps/",
        json={"app_name": app_name, "day_limit": day_limit},
        headers=headers
    )
    response.raise_for_status()
    return response.json()

def delete_app(token: str, app_token: str):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.delete(
        f"{API_BASE_URL}/apps/",
        json={"app_token": app_token},
        headers=headers
    )
    return response.status_code == 200

def get_apps(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    response = requests.get(
        f"{API_BASE_URL}/apps/all",
        headers=headers
    )
    response.raise_for_status()
    return response.json()

def check_url(api_key: str, url: str):
    response = requests.post(
        f"{API_BASE_URL}/urls/one",
        json={"url": url, "api_key": api_key}
    )
    response.raise_for_status()
    return response.json()

def check_urls_batch(api_key: str, urls: list):
    response = requests.post(
        f"{API_BASE_URL}/urls/list",
        json={"urls": urls, "api_key": api_key}
    )
    response.raise_for_status()
    return response.json()

def get_history(api_key: str, start_date: datetime = None, end_date: datetime = None):
    params = {"token": api_key}
    if start_date:
        params["start_dt"] = start_date.isoformat()
    if end_date:
        params["end_dt"] = end_date.isoformat()
    
    response = requests.post(
        f"{API_BASE_URL}/urls/history",
        json=params
    )
    response.raise_for_status()
    return response.json()

def main():
    st.set_page_config(page_title="Phishing Detection Service", layout="wide")
    
    if "token" not in st.session_state:
        st.session_state.token = None
        st.session_state.current_user = None
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    with st.sidebar:
        st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        
        auth_tab, reg_tab = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        
        with auth_tab:
            email = st.text_input("Email", key="login_email")
            password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_pass")
            if st.button("–í–æ–π—Ç–∏"):
                try:
                    token_data = login(email, password)
                    st.session_state.token = token_data["access_token"]
                    st.session_state.current_user = email
                    st.success("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                except Exception as e:
                    st.error("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.")
        
        with reg_tab:
            new_email = st.text_input("Email", key="reg_email")
            new_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_pass")
            if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
                try:
                    register(new_email, new_password)
                    st.success("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.")
                except:
                    st.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, email —É–∂–µ –∑–∞–Ω—è—Ç.")
        
        if st.session_state.token:
            if st.button("–í—ã–π—Ç–∏"):
                st.session_state.token = None
                st.session_state.current_user = None
                st.rerun()
    
    if not st.session_state.token:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üõ°Ô∏è –°–µ—Ä–≤–∏—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –Ω–∞ —Ñ–∏—à–∏–Ω–≥")
    
    tab1, tab2, tab3, tab4 = st.tabs(["–ü—Ä–æ–≤–µ—Ä–∫–∞ URL", "–ú–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫", "API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"])
    
    with tab1:
        st.header("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å URL")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", placeholder="https://example.com")
            
        with col2:
            api_key = st.text_input("API –∫–ª—é—á", help="–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤–æ –≤–∫–ª–∞–¥–∫–µ '–ú–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'")
        
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å") and url:
            if not api_key:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á")
            else:
                try:
                    result = check_url(api_key, url)
                    if result.get("is_phishing"):
                        st.error(f"‚ö†Ô∏è –§–∏—à–∏–Ω–≥–æ–≤—ã–π URL! –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence_level']*100:.1f}%")
                        st.write(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
                    else:
                        st.success(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {100 - result['confidence_level']*100:.1f}%")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL: {str(e)}")
        
        st.divider()
        st.header("üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        urls_text = st.text_area("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)", height=100)
        if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–∫–µ—Ç–Ω–æ") and urls_text:
            if not api_key:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á")
            else:
                urls = [url.strip() for url in urls_text.split("\n") if url.strip()]
                try:
                    results = check_urls_batch(api_key, urls)
                    for url, result in zip(urls, results):
                        with st.expander(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {url}"):
                            if result.get("is_phishing"):
                                st.error(f"‚ö†Ô∏è –§–∏—à–∏–Ω–≥–æ–≤—ã–π URL! –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence_level']*100:.1f}%")
                                st.write(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
                            else:
                                st.success(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π URL. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence_level']*100:.1f}%")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}")
    
    with tab2:
        st.header("üì± –ú–æ–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        
        try:
            apps = get_apps(st.session_state.token)
            
            if not apps:
                st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∏–∂–µ.")
            else:
                for app in apps:
                    with st.expander(f"üîë {app['app_name']}"):
                        st.code(f"API –∫–ª—é—á: {app['token']}", language="text")
                        st.write(f"–õ–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤ –¥–µ–Ω—å: {app['day_limit']}")
                        st.write(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {app['url_count_on_day']}")
                        
                        if st.button(f"–£–¥–∞–ª–∏—Ç—å {app['app_name']}", key=f"del_{app['token']}"):
                            try:
                                if delete_app(st.session_state.token, app['token']):
                                    st.success("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
                                    st.rerun()
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
        
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: {str(e)}")
        
        st.divider()
        st.header("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        
        with st.form("create_app"):
            app_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", placeholder="–ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            day_limit = st.number_input("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø—Ä–æ–≤–µ—Ä–æ–∫", min_value=1, value=1000)
            
            if st.form_submit_button("–°–æ–∑–¥–∞—Ç—å"):
                try:
                    result = create_app(st.session_state.token, app_name, day_limit)
                    st.success(f"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! API –∫–ª—é—á: {result['token']}")
                    st.rerun()
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}")
    
    with tab3:
        st.header("üìä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫")
        
        api_key = st.text_input("API –∫–ª—é—á –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏", help="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", key="history_api_key")
        
        if api_key:
            col1, col2 = st.columns(2)
            with col1:
                start_date = st.date_input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now() - timedelta(days=7))
            with col2:
                end_date = st.date_input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞", value=datetime.now())
            
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
                try:
                    history = get_history(
                        api_key,
                        datetime.combine(start_date, datetime.min.time()),
                        datetime.combine(end_date, datetime.max.time())
                    )
                    
                    st.subheader(f"üìå {history['app_name']}")
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫", history['all_urls'])
                    with col2:
                        st.metric("–§–∏—à–∏–Ω–≥–æ–≤—ã—Ö URL", history['phishing_urls'])
                    with col3:
                        st.metric("–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–æ–∫", history['day_limit_remaining'])
                    
                    st.divider()
                    
                    if history['history_urls']:
                        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                        for url, result, ts in zip(
                            history['history_urls'],
                            history['history_results'],
                            history['history_ts']
                        ):
                            with st.expander(f"{ts} - {url[:50]}..."):
                                if result['is_phishing']:
                                    st.error(f"‚ö†Ô∏è –§–∏—à–∏–Ω–≥ ({result['confidence_level']*100:.1f}%)")
                                else:
                                    st.success(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ ({result['confidence_level']*100:.1f}%)")
                                st.write(f"–ü—Ä–∏—á–∏–Ω–∞: {result['reason']}")
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
    
    with tab4:
        st.header("üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        
        st.markdown("""
        ### –ë–∞–∑–æ–≤—ã–π URL
        ```
        {API_BASE_URL}
        ```
        
        ### –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞:
        ```http
        POST /users/token
        Content-Type: application/x-www-form-urlencoded
        
        username=your_email@example.com&password=your_password
        ```
        
        ### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
        - **–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**:
        ```http
        POST /apps/
        Authorization: Bearer <your_token>
        Content-Type: application/json
        
        {"app_name": "My App", "day_limit": 1000}
        ```
        
        - **–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π**:
        ```http
        GET /apps/all
        Authorization: Bearer <your_token>
        ```
        
        - **–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**:
        ```http
        DELETE /apps/
        Authorization: Bearer <your_token>
        Content-Type: application/json
        
        {"app_token": "your_app_token"}
        ```
        
        ### –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
        - **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–∏–Ω URL**:
        ```http
        POST /urls/one
        Content-Type: application/json
        
        {"url": "https://example.com", "api_key": "your_app_token"}
        ```
        
        - **–ü–∞–∫–µ—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞** (–¥–æ 10 URL):
        ```http
        POST /urls/list
        Content-Type: application/json
        
        {"urls": ["https://example.com", "https://test.com"], "api_key": "your_app_token"}
        ```
        
        - **–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–≤–µ—Ä–æ–∫**:
        ```http
        POST /urls/history
        Content-Type: application/json
        
        {"token": "your_app_token", "start_dt": "2023-01-01", "end_dt": "2023-01-31"}
        ```
        """)

if __name__ == "__main__":
    main()